// db/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Board {
  id             String   @id
  name           String
  serialNumber   String?
  accessTokenEnc String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  matches Match[]
}

model Match {
  id          String   @id @default(cuid())
  boardId     String?
  board       Board?   @relation(fields: [boardId], references: [id])
  playerA     String
  playerB     String
  startScore  Int
  status      String?
  outMode     String?
  legsMode    String?
  legsTarget  Int?
  scoreA      Int?
  scoreB      Int?
  currentTurn String?
  legsWonA    Int?
  legsWonB    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  legs   Leg[]
  visits Visit[] // <-- motsatt side av Visit.match
}

model Leg {
  id        String   @id @default(cuid())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  number    Int
  winner    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visit {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  legNo       Int
  turn        String // "A" | "B"
  player      String // "A" | "B"
  darts       String // JSON string: [{m:"S"|"D"|"T", v:number}, ...]  (SQLite: TEXT)
  scoreBefore Int
  scoreAfter  Int
  bust        Boolean
  checkout    Boolean
  createdAt   DateTime @default(now())

  @@index([matchId, createdAt])
}
